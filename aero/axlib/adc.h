
//-------------------------------------------------<                axlib v1.1                 >----------------------------------------------------
//-------------------------------------------------<        Библиотека для работы с АЦП        >----------------------------------------------------
//-------------------------------------------------< Кузнецов Алексей 2015 http://www.avrki.ru >---------------------------------------------------- 


#ifndef ADC_H_
#define ADC_H_

#if !defined(MAIN_INIT_H_)
#error "You must included (#include \"main_init.h\") befor use (#include <axlib/adc.h>)."
#endif

//-------------------------------------------------------------------------
//							Подключаемые библиотеки
//-------------------------------------------------------------------------

#include <avr/io.h>
#include <avr/interrupt.h>
#include <axlib/type_var.h>

//-------------------------------------------------------------------------
//							Инициализация переменных
//-------------------------------------------------------------------------

volatile WORD	adc = 0;
volatile ADATA	constanta = 0;

//-------------------------------------------------------------------------
//							Объявление псевдонимов
//-------------------------------------------------------------------------

#define ADC_IREF_ON		0xC0
#define ADC_IREF_OFF	0x40

#define ADD_MASK		0x07

#define ADC_CH_0		0
#define ADC_CH_1		1
#define ADC_CH_2		2
#define ADC_CH_3		3
#define ADC_CH_4		4
#define ADC_CH_5		5
#define ADC_CH_6		6
#define ADC_CH_7		7

//-------------------------------------------------------------------------
//					Функция прерывания ADC после преобразования
//-------------------------------------------------------------------------

ISR(ADC_vect)
{
	adc = ADCW;
}

//-------------------------------------------------------------------------
//	Функция инициализации ADC.
//
//	Принимает аргументы:
//
//		ADATA aref - Передает функции значение опорного напряжения в вольтах.
//		BYTE inref - Включить/выключить внутренний ИОН. ADC_IREF_ON, ADC_IREF_OFF
//		
//-------------------------------------------------------------------------

void adc_init(ADATA aref, BYTE inref)
{
	constanta = aref/1024;
	
	ADMUX = inref;
	ADCSRA = (1<<ADEN)|(1<<ADIE);
	
	if((F_CPU >=400000) & (F_CPU < 800000))
		{
			ADCSRA |= (1<<ADPS1);
		}
	else if((F_CPU >= 800000) & (F_CPU < 1600000))
		{
			ADCSRA |= (1<<ADPS0)|(1<<ADPS1);
		}
	else if((F_CPU >= 1600000) & (F_CPU < 3200000))
		{
			ADCSRA |= (1<<ADPS2);
		}
	else if((F_CPU >= 3200000) & (F_CPU < 6400000))
		{
			ADCSRA |= (1<<ADPS0)|(1<<ADPS2);
		}
	else if((F_CPU >= 6400000) & (F_CPU < 12800000))
		{
			ADCSRA |= (1<<ADPS1)|(1<<ADPS2);
		}
	else if(F_CPU > 12800000)
		{
			ADCSRA |= (1<<ADPS1)|(1<<ADPS2);
		}
	
	sei();
}

//-------------------------------------------------------------------------
//	Функция получения данных из ADC.
//
//	Возвращает значение:
//
//		WORD - Значение ADC
//-------------------------------------------------------------------------

WORD adc_data(BYTE ch)
{
	ADMUX &= ~(ADD_MASK);
	ADMUX |= (ch & (ADD_MASK));
	ADCSRA |= (1<<ADSC);
	_delay_us(100);
	return adc;
}

//-------------------------------------------------------------------------
//	Функция возвращает значение в вольтах относительно опорного напряжения.
//
//	Возвращает значение:
//
//		ADATA - Значение ADC в вольтах
//-------------------------------------------------------------------------

ADATA adc_volt(BYTE ch)
{
	ADATA temp = 0;
	
	temp = adc_data(ch);
	
	return (temp*constanta);
}

#endif /* ADC_H_ */